diff --git a/board/nexell/s5p6818/Kcodiff --git a/board/nexell/s5p6818/Kconfig b/board/nexell/s5p6818/Kconfig
index e1cdb72..61dfbef 100644
--- a/board/nexell/s5p6818/Kconfig
+++ b/board/nexell/s5p6818/Kconfig
@@ -11,6 +11,11 @@ config TARGET_ARTIK710_RAPTOR
 	help
 	  Support for artik710_raptor platform.

+config TARGET_ARTIK710_IOT_ACADEMY
+	bool "ARTIK710_IOT_ACADEMY"
+	help
+	  Support for artik710 based IoT Academy board.
+
 endchoice

 config SYS_VENDOR
diff --git a/board/nexell/s5p6818/Makefile b/board/nexell/s5p6818/Makefile
index 5fec963..f8af9b8 100644
--- a/board/nexell/s5p6818/Makefile
+++ b/board/nexell/s5p6818/Makefile
@@ -7,3 +7,4 @@

 obj-$(CONFIG_TARGET_S5P6818_DRONE)	+= drone/
 obj-$(CONFIG_TARGET_ARTIK710_RAPTOR)	+= artik710_raptor/
+obj-$(CONFIG_TARGET_ARTIK710_IOT_ACADEMY)	+= artik710_iot_academy/
diff --git a/board/nexell/s5p6818/artik710_iot_academy/Makefile b/board/nexell/s5p6818/artik710_iot_academy/Makefile
new file mode 100644
index 0000000..032afb0
--- /dev/null
+++ b/board/nexell/s5p6818/artik710_iot_academy/Makefile
@@ -0,0 +1,8 @@
+#
+# Copyright (C) 2017  Samsung Electronics Co., Ltd.
+# Author: Odisharia Georgiy <g.odishariia@partner.samsung.com>
+#
+# SPDX-License-Identifier:      GPL-2.0+
+#
+
+obj-y	:= board.o
diff --git a/board/nexell/s5p6818/artik710_iot_academy/board.c b/board/nexell/s5p6818/artik710_iot_academy/board.c
new file mode 100644
index 0000000..6e94fc9
--- /dev/null
+++ b/board/nexell/s5p6818/artik710_iot_academy/board.c
@@ -0,0 +1,347 @@
+/*
+ * Copyright (C) 2017  Samsung Electronics Co., Ltd.
+ * Author: Odisharia Georgiy <g.odishariia@partner.samsung.com>
+ *
+ * SPDX-License-Identifier:      GPL-2.0+
+ */
+
+#include <config.h>
+#include <common.h>
+#include <asm/io.h>
+
+#include <asm/arch/nexell.h>
+#include <asm/arch/nx_gpio.h>
+#include <memalign.h>
+
+#ifdef CONFIG_DM_PMIC_NXE2000
+#include <dm.h>
+#include <dm/uclass-internal.h>
+#include <power/pmic.h>
+#include <power/nxe2000.h>
+#endif
+
+#ifdef CONFIG_USB_GADGET
+#include <usb.h>
+#endif
+
+#ifdef CONFIG_SENSORID_ARTIK
+#include <sensorid.h>
+#include <sensorid_artik.h>
+#endif
+
+#ifdef CONFIG_ARTIK_OTA
+#include <artik_ota.h>
+#endif
+
+#ifdef CONFIG_ARTIK_MAC
+#include <artik_mac.h>
+#endif
+
+DECLARE_GLOBAL_DATA_PTR;
+
+#ifdef CONFIG_REVISION_TAG
+u32 board_rev;
+
+u32 get_board_rev(void)
+{
+	return board_rev;
+}
+
+static void check_hw_revision(void)
+{
+	u32 val = 0;
+
+	val |= nx_gpio_get_input_value(4, 6);
+	val <<= 1;
+
+	val |= nx_gpio_get_input_value(4, 5);
+	val <<= 1;
+
+	val |= nx_gpio_get_input_value(4, 4);
+
+	board_rev = val;
+}
+
+static void set_board_rev(u32 revision)
+{
+	char info[64] = {0, };
+
+	snprintf(info, ARRAY_SIZE(info), "%d", revision);
+	setenv("board_rev", info);
+}
+#endif
+
+#ifdef CONFIG_DISPLAY_BOARDINFO
+int checkboard(void)
+{
+	printf("\nBoard: ARTIK710 Raptor\n");
+
+	return 0;
+}
+#endif
+
+#ifdef CONFIG_SENSORID_ARTIK
+static void get_sensorid(u32 revision)
+{
+	static struct udevice *dev;
+	uint16_t buf[5] = {0, };
+	char panel_env[64], *panel_str;
+	bool found_panel = false;
+	int i, ret;
+
+	if (revision < 3)
+		return;
+
+	ret = uclass_get_device_by_name(UCLASS_SENSOR_ID, "sensor_id@36", &dev);
+	if (ret < 0) {
+		printf("Cannot find sensor_id device\n");
+		return;
+	}
+
+	ret = sensorid_get_type(dev, &buf[0], 4);
+	if (ret < 0) {
+		printf("Cannot read sensor type - %d\n", ret);
+		return;
+	}
+
+	ret = sensorid_get_addon(dev, &buf[4]);
+	if (ret < 0) {
+		printf("Cannot read add-on board type - %d\n", ret);
+		return;
+	}
+
+	printf("LCD#1:0x%X, LCD#2:0x%X, CAM#1:0x%X, CAM#2:0x%X\n",
+			buf[0], buf[1], buf[2], buf[3]);
+	printf("ADD-ON-BOARD : 0x%X\n", buf[4]);
+
+	for (i = 0; i < SENSORID_LCD_MAX; i++) {
+		if (buf[i] != SENSORID_LCD_NONE) {
+			snprintf(panel_env, sizeof(panel_env), "lcd%d_%d",
+				 i + 1, buf[i]);
+			panel_str = getenv(panel_env);
+			if (panel_str) {
+				setenv("lcd_panel", panel_str);
+				found_panel = true;
+			}
+			break;
+		}
+	}
+
+	if (!found_panel)
+		setenv("lcd_panel", "NONE");
+}
+#endif
+
+#ifdef CONFIG_SET_DFU_ALT_INFO
+void set_dfu_alt_info(char *interface, char *devstr)
+{
+	size_t buf_size = CONFIG_SET_DFU_ALT_BUF_LEN;
+	ALLOC_CACHE_ALIGN_BUFFER(char, buf, buf_size);
+
+	snprintf(buf, buf_size, "setenv dfu_alt_info \"%s\"", CONFIG_DFU_ALT);
+	run_command(buf, 0);
+}
+#endif
+
+/*------------------------------------------------------------------------------
+ * intialize nexell soc and board status.
+ */
+
+static void nx_phy_init(void)
+{
+#ifdef CONFIG_SENSORID_ARTIK
+	/* I2C-GPIO for AVR */
+	nx_gpio_set_pad_function(1, 11, 2);     /* GPIO */
+	nx_gpio_set_pad_function(1, 18, 2);     /* GPIO */
+#endif
+}
+
+/* call from u-boot */
+int board_early_init_f(void)
+{
+	return 0;
+}
+
+#ifdef CONFIG_VIDEO_NX_LVDS
+void board_display_reset(void)
+{
+	nx_gpio_set_pad_function(4, 3, 0);	/* E_3 : LVDS RESET */
+	nx_gpio_set_output_enable(4, 3, 0);
+	mdelay(1);
+	nx_gpio_set_output_enable(4, 3, 1);
+}
+#endif
+
+int mmc_get_env_dev(void)
+{
+	int port_num;
+	int boot_mode = readl(PHY_BASEADDR_CLKPWR + SYSRSTCONFIG);
+
+	if ((boot_mode & BOOTMODE_MASK) == BOOTMODE_SDMMC) {
+		port_num = readl(SCR_ARM_SECOND_BOOT_REG1);
+
+		if (port_num == EMMC_PORT_NUM)
+			return 0;
+		else if (port_num == SD_PORT_NUM)
+			return 1;
+	} else if ((boot_mode & BOOTMODE_MASK) == BOOTMODE_USB) {
+		return 0;
+	}
+
+	return -1;
+}
+
+int board_init(void)
+{
+#ifdef CONFIG_REVISION_TAG
+	check_hw_revision();
+	printf("HW Revision:\t%d\n", board_rev);
+
+#endif
+
+	nx_phy_init();
+
+#ifdef CONFIG_VIDEO_NX_LVDS
+	board_display_reset();
+#endif
+
+	return 0;
+}
+
+/* u-boot dram initialize  */
+int dram_init(void)
+{
+	gd->ram_size = CONFIG_SYS_SDRAM_SIZE;
+	return 0;
+}
+
+/* u-boot dram board specific */
+void dram_init_banksize(void)
+{
+	/* set global data memory */
+	gd->bd->bi_arch_number = machine_arch_type;
+	gd->bd->bi_boot_params = CONFIG_SYS_SDRAM_BASE + 0x00000100;
+
+	gd->bd->bi_dram[0].start = CONFIG_SYS_SDRAM_BASE;
+	gd->bd->bi_dram[0].size  = CONFIG_SYS_SDRAM_SIZE;
+}
+
+#ifdef CONFIG_DM_PMIC_NXE2000
+void pmic_init(void)
+{
+	static struct udevice *dev;
+	int ret = -ENODEV;
+	uint8_t bit_mask = 0;
+
+#ifdef CONFIG_REVISION_TAG
+	if (get_board_rev() >= 3) {
+		ret = pmic_get("nxe2000_gpio@32", &dev);
+		if (ret)
+			printf("Can't get PMIC: %s!\n", "nxe2000_gpio@32");
+	} else {
+#endif
+		ret = pmic_get("nxe2000@32", &dev);
+		if (ret)
+			printf("Can't get PMIC: %s!\n", "nxe2000@32");
+#ifdef CONFIG_REVISION_TAG
+	}
+#endif
+
+	bit_mask = pmic_reg_read(dev, NXE2000_REG_PWRONTIMSET);
+	bit_mask &= ~(0x1 << NXE2000_POS_PWRONTIMSET_OFF_JUDGE_PWRON);
+	bit_mask |= (0x0 << NXE2000_POS_PWRONTIMSET_OFF_JUDGE_PWRON);
+	ret = pmic_write(dev, NXE2000_REG_PWRONTIMSET, &bit_mask, 1);
+	if (ret)
+		printf("Can't write PMIC REG: %d!\n", NXE2000_REG_PWRONTIMSET);
+
+	bit_mask = 0x00;
+	ret = pmic_reg_write(dev, (u32)NXE2000_REG_BANKSEL, (u32)bit_mask);
+	if (ret)
+		printf("Can't write PMIC register: %d!\n", NXE2000_REG_BANKSEL);
+
+	bit_mask = ((0 << NXE2000_POS_DCxCTL2_DCxOSC) |
+			(0 << NXE2000_POS_DCxCTL2_DCxSR) |
+			(3 << NXE2000_POS_DCxCTL2_DCxLIM) |
+			(0 << NXE2000_POS_DCxCTL2_DCxLIMSDEN));
+	ret = pmic_write(dev, NXE2000_REG_DC1CTL2, &bit_mask, 1);
+	if (ret)
+		printf("Can't write PMIC register: %d!\n", NXE2000_REG_DC1CTL2);
+
+	bit_mask = ((0 << NXE2000_POS_DCxCTL2_DCxOSC) |
+			(0 << NXE2000_POS_DCxCTL2_DCxSR) |
+			(3 << NXE2000_POS_DCxCTL2_DCxLIM) |
+			(0 << NXE2000_POS_DCxCTL2_DCxLIMSDEN));
+	ret = pmic_write(dev, NXE2000_REG_DC2CTL2, &bit_mask, 1);
+	if (ret)
+		printf("Can't write PMIC register: %d!\n", NXE2000_REG_DC2CTL2);
+
+	bit_mask = ((0 << NXE2000_POS_DCxCTL2_DCxOSC) |
+			(0 << NXE2000_POS_DCxCTL2_DCxSR) |
+			(1 << NXE2000_POS_DCxCTL2_DCxLIM) |
+			(1 << NXE2000_POS_DCxCTL2_DCxLIMSDEN));
+	ret = pmic_write(dev, NXE2000_REG_DC3CTL2, &bit_mask, 1);
+	if (ret)
+		printf("Can't write PMIC register: %d!\n", NXE2000_REG_DC3CTL2);
+
+	bit_mask = ((0 << NXE2000_POS_DCxCTL2_DCxOSC) |
+			(0 << NXE2000_POS_DCxCTL2_DCxSR) |
+			(1 << NXE2000_POS_DCxCTL2_DCxLIM) |
+			(1 << NXE2000_POS_DCxCTL2_DCxLIMSDEN));
+	ret = pmic_write(dev, NXE2000_REG_DC4CTL2, &bit_mask, 1);
+	if (ret)
+		printf("Can't write PMIC register: %d!\n", NXE2000_REG_DC4CTL2);
+
+	bit_mask = ((0 << NXE2000_POS_DCxCTL2_DCxOSC) |
+			(0 << NXE2000_POS_DCxCTL2_DCxSR) |
+			(1 << NXE2000_POS_DCxCTL2_DCxLIM) |
+			(1 << NXE2000_POS_DCxCTL2_DCxLIMSDEN));
+	ret = pmic_write(dev, NXE2000_REG_DC5CTL2, &bit_mask, 1);
+	if (ret)
+		printf("Can't write PMIC register: %d!\n", NXE2000_REG_DC5CTL2);
+
+	bit_mask = (1 << NXE2000_POS_CHGCTL1_SUSPEND);
+	ret = pmic_write(dev, NXE2000_REG_CHGCTL1, &bit_mask, 1);
+	if (ret)
+		printf("Can't write PMIC register: %d!\n", NXE2000_REG_CHGCTL1);
+}
+#endif
+
+int board_late_init(void)
+{
+#ifdef CONFIG_DM_PMIC_NXE2000
+	pmic_init();
+#endif
+#ifdef CONFIG_REVISION_TAG
+	set_board_rev(board_rev);
+#endif
+#ifdef CONFIG_CMD_FACTORY_INFO
+	run_command("run factory_load", 0);
+#endif
+#ifdef CONFIG_ARTIK_MAC
+	generate_mac();
+#endif
+#ifdef CONFIG_SENSORID_ARTIK
+	get_sensorid(board_rev);
+#endif
+#ifdef CONFIG_ARTIK_OTA
+	check_ota_update();
+#endif
+	return 0;
+}
+
+#ifdef CONFIG_USB_GADGET
+int g_dnl_bind_fixup(struct usb_device_descriptor *dev, const char *name)
+{
+	if (!strcmp(name, "usb_dnl_thor")) {
+		put_unaligned(CONFIG_G_DNL_THOR_VENDOR_NUM, &dev->idVendor);
+		put_unaligned(CONFIG_G_DNL_THOR_PRODUCT_NUM, &dev->idProduct);
+	} else if (!strcmp(name, "usb_dnl_ums")) {
+		put_unaligned(CONFIG_G_DNL_UMS_VENDOR_NUM, &dev->idVendor);
+		put_unaligned(CONFIG_G_DNL_UMS_PRODUCT_NUM, &dev->idProduct);
+	} else {
+		put_unaligned(CONFIG_G_DNL_VENDOR_NUM, &dev->idVendor);
+		put_unaligned(CONFIG_G_DNL_PRODUCT_NUM, &dev->idProduct);
+	}
+	return 0;
+}
+#endif
diff --git a/configs/artik710_iot_academy_defconfig b/configs/artik710_iot_academy_defconfig
new file mode 100644
index 0000000..6316368
--- /dev/null
+++ b/configs/artik710_iot_academy_defconfig
@@ -0,0 +1,46 @@
+CONFIG_ARM=y
+CONFIG_SYS_CONFIG_NAME="artik710_iot_academy"
+CONFIG_ARCH_NEXELL=y
+CONFIG_ARCH_S5P6818=y
+CONFIG_ARTIK_OTA=y
+CONFIG_TARGET_ARTIK710_IOT_ACADEMY=y
+# CONFIG_SYS_MALLOC_F is not set
+CONFIG_DM_I2C=y
+CONFIG_DM_GPIO=y
+CONFIG_DEFAULT_DEVICE_TREE="s5p6818-artik710-raptor"
+# CONFIG_SYS_MALLOC_CLEAR_ON_INIT is not set
+CONFIG_FIT=y
+# CONFIG_CMD_IMI is not set
+# CONFIG_CMD_IMLS is not set
+# CONFIG_CMD_FLASH is not set
+CONFIG_CMD_USB=y
+# CONFIG_CMD_FPGA is not set
+CONFIG_CMD_GPIO=y
+# CONFIG_CMD_NFS is not set
+CONFIG_CMD_PING=y
+CONFIG_CMD_FDISK=y
+CONFIG_CMD_EXT4_IMG_WRITE=y
+CONFIG_CMD_SD_RECOVERY=y
+CONFIG_CMD_PMIC=y
+CONFIG_CMD_REGULATOR=y
+CONFIG_OF_CONTROL=y
+CONFIG_OF_EMBED=y
+CONFIG_NET_RANDOM_ETHADDR=y
+CONFIG_DM=y
+CONFIG_NX_GPIO=y
+CONFIG_DM_I2C_GPIO=y
+CONFIG_SYS_I2C_NEXELL=y
+CONFIG_SENSORID=y
+CONFIG_SENSORID_ARTIK=y
+CONFIG_DM_ETH=y
+CONFIG_ETH_DESIGNWARE=y
+CONFIG_PINCTRL=y
+CONFIG_DM_PMIC=y
+CONFIG_DM_PMIC_NXE2000=y
+CONFIG_DM_REGULATOR=y
+CONFIG_DM_REGULATOR_NXE2000=y
+CONFIG_USB=y
+CONFIG_DM_USB=y
+CONFIG_USB_EHCI_HCD=y
+CONFIG_USB_STORAGE=y
+CONFIG_ERRNO_STR=y
diff --git a/include/configs/artik710_iot_academy.h b/include/configs/artik710_iot_academy.h
new file mode 100644
index 0000000..04360be
--- /dev/null
+++ b/include/configs/artik710_iot_academy.h
@@ -0,0 +1,474 @@
+/*
+ * Copyright (C) 2017  Samsung Electronics Co., Ltd.
+ * Author: Odisharia Georgiy <g.odishariia@partner.samsung.com>
+ *
+ * SPDX-License-Identifier:      GPL-2.0+
+ */
+
+#ifndef __CONFIG_H__
+#define __CONFIG_H__
+
+#include <linux/sizes.h>
+
+/*-----------------------------------------------------------------------
+ *  u-boot-2016.01
+ */
+#define CONFIG_SYS_LDSCRIPT "arch/arm/cpu/armv8/u-boot.lds"
+
+#define	CONFIG_MACH_S5P6818
+
+/*-----------------------------------------------------------------------
+ *  System memory Configuration
+ */
+
+#define	CONFIG_SYS_TEXT_BASE			0x43C00000
+/* init and run stack pointer */
+#define	CONFIG_SYS_INIT_SP_ADDR			CONFIG_SYS_TEXT_BASE
+
+/* malloc() pool */
+#define	CONFIG_MEM_MALLOC_START			0x44000000
+#define CONFIG_MEM_MALLOC_LENGTH	(CONFIG_ENV_SIZE + (1 << 20) +	\
+					CONFIG_SYS_DFU_DATA_BUF_SIZE * 2 + \
+					(8 << 20))
+
+/* when CONFIG_LCD */
+#define CONFIG_FB_ADDR				0x46000000
+
+/* Download OFFSET */
+#define CONFIG_MEM_LOAD_ADDR			0x48000000
+
+#define CONFIG_SYS_BOOTM_LEN    (64 << 20)      /* Increase max gunzip size */
+
+/* AARCH64 */
+#define COUNTER_FREQUENCY			200000000
+#define CPU_RELEASE_ADDR			CONFIG_SYS_INIT_SP_ADDR
+
+/*-----------------------------------------------------------------------
+ *  High Level System Configuration
+ */
+
+/* Not used: not need IRQ/FIQ stuff	*/
+#undef  CONFIG_USE_IRQ
+/* decrementer freq: 1ms ticks */
+#define CONFIG_SYS_HZ				1000
+
+/* board_init_f */
+#define	CONFIG_SYS_SDRAM_BASE			0x40000000
+#define	CONFIG_SYS_SDRAM_SIZE			0x3DF00000
+
+/* dram 1 bank num */
+#define CONFIG_NR_DRAM_BANKS			1
+
+/* relocate_code and  board_init_r */
+#define	CONFIG_SYS_MALLOC_END			(CONFIG_MEM_MALLOC_START + \
+						 CONFIG_MEM_MALLOC_LENGTH)
+/* board_init_f, more than 2M for ubifs */
+#define CONFIG_SYS_MALLOC_LEN \
+	(CONFIG_MEM_MALLOC_LENGTH - 0x8000)
+
+/* kernel load address */
+#define CONFIG_SYS_LOAD_ADDR			CONFIG_MEM_LOAD_ADDR
+
+/* memtest works on */
+#define CONFIG_SYS_MEMTEST_START		CONFIG_SYS_MALLOC_END
+#define CONFIG_SYS_MEMTEST_END			((ulong)CONFIG_SYS_SDRAM_BASE \
+						 + (ulong)CONFIG_SYS_SDRAM_SIZE)
+
+/*-----------------------------------------------------------------------
+ *  System initialize options (board_init_f)
+ */
+
+/* board_init_f->init_sequence, call arch_cpu_init */
+#define CONFIG_ARCH_CPU_INIT
+/* board_init_f->init_sequence, call board_early_init_f */
+#define	CONFIG_BOARD_EARLY_INIT_F
+/* board_init_r, call board_early_init_f */
+#define	CONFIG_BOARD_LATE_INIT
+/* board_init_f->init_sequence, call print_cpuinfo */
+#define	CONFIG_DISPLAY_CPUINFO
+/* board_init_f, CONFIG_SYS_ICACHE_OFF */
+#define	CONFIG_SYS_DCACHE_OFF
+/* board_init_r, call arch_misc_init */
+#define	CONFIG_ARCH_MISC_INIT
+/*#define	CONFIG_SYS_ICACHE_OFF*/
+
+/*-----------------------------------------------------------------------
+ *	U-Boot default cmd
+ */
+#define	CONFIG_CMD_MEMTEST
+
+/*-----------------------------------------------------------------------
+ *	U-Boot Environments
+ */
+/* refer to common/env_common.c	*/
+#define CONFIG_BOOTDELAY			3
+
+/*-----------------------------------------------------------------------
+ * Miscellaneous configurable options
+ */
+#ifdef CONFIG_SYS_PROMPT
+#undef CONFIG_SYS_PROMPT
+/* Monitor Command Prompt   */
+#define CONFIG_SYS_PROMPT			"artik710# "
+#endif
+/* undef to save memory	   */
+#define CONFIG_SYS_LONGHELP
+/* Console I/O Buffer Size  */
+#define CONFIG_SYS_CBSIZE			1024
+/* Print Buffer Size */
+#define CONFIG_SYS_PBSIZE			(CONFIG_SYS_CBSIZE + \
+						 sizeof(CONFIG_SYS_PROMPT)+16)
+/* max number of command args   */
+#define CONFIG_SYS_MAXARGS			16
+/* Boot Argument Buffer Size    */
+#define CONFIG_SYS_BARGSIZE			CONFIG_SYS_CBSIZE
+
+/*-----------------------------------------------------------------------
+ * allow to overwrite serial and ethaddr
+ */
+#define CONFIG_ENV_OVERWRITE
+#define CONFIG_SYS_HUSH_PARSER			/* use "hush" command parser */
+#ifdef CONFIG_SYS_HUSH_PARSER
+#define CONFIG_SYS_PROMPT_HUSH_PS2	"> "
+#endif
+
+/*-----------------------------------------------------------------------
+ * Etc Command definition
+ */
+#define	CONFIG_CMD_IMI				/* image info	*/
+#define CONFIG_CMDLINE_EDITING			/* add command line history */
+#define	CONFIG_CMDLINE_TAG			/* use bootargs commandline */
+#undef	CONFIG_BOOTM_NETBSD
+#undef	CONFIG_BOOTM_RTEMS
+#define CONFIG_INITRD_TAG
+
+/*-----------------------------------------------------------------------
+ * serial console configuration
+ */
+#define CONFIG_S5P_SERIAL
+#define CONFIG_S5P_SERIAL_INDEX			3
+#define CONFIG_S5P_SERIAL_CLOCK			50000000
+
+#define CONFIG_BAUDRATE				115200
+#define CONFIG_SYS_BAUDRATE_TABLE \
+		{ 9600, 19200, 38400, 57600, 115200 }
+#define CONFIG_S5P_SERIAL_FLUSH_ON_INIT
+
+#define CONFIG_UART_CLKGEN_CLOCK_HZ		CONFIG_S5P_SERIAL_CLOCK
+
+/*-----------------------------------------------------------------------
+ * NOR FLASH
+ */
+#define	CONFIG_SYS_NO_FLASH
+
+/*-----------------------------------------------------------------------
+ * SD/MMC
+ */
+
+#define CONFIG_GENERIC_MMC
+#define CONFIG_MMC
+#define CONFIG_DWMMC
+#define CONFIG_NEXELL_DWMMC
+#define CONFIG_BOUNCE_BUFFER
+#define CONFIG_CMD_MMC
+
+#if defined(CONFIG_MMC)
+#define CONFIG_2NDBOOT_OFFSET		512
+#define CONFIG_2NDBOOT_SIZE		(64*1024)
+#define CONFIG_FIP_OFFSET		(CONFIG_2NDBOOT_OFFSET +\
+					 CONFIG_2NDBOOT_SIZE)
+#define CONFIG_FIP_SIZE			(2880*1024)
+#define CONFIG_ENV_IS_IN_MMC
+#define CONFIG_SYS_MMC_ENV_DEV		0
+#define	CONFIG_ENV_OFFSET		(CONFIG_FIP_OFFSET +\
+					 CONFIG_FIP_SIZE)
+#define CONFIG_ENV_SIZE			(16*1024)	/* env size */
+#endif
+
+#if defined(CONFIG_MMC)
+#define CONFIG_DOS_PARTITION
+#define CONFIG_CMD_FAT
+#define CONFIG_FS_FAT
+#define CONFIG_FAT_WRITE
+
+#define CONFIG_CMD_EXT4
+#define CONFIG_CMD_EXT4_WRITE
+#define CONFIG_FS_EXT4
+#define CONFIG_EXT4_WRITE
+#endif
+
+/*-----------------------------------------------------------------------
+ * Default environment organization
+ */
+#if !defined(CONFIG_ENV_IS_IN_MMC) && !defined(CONFIG_ENV_IS_IN_NAND) && \
+	!defined(CONFIG_ENV_IS_IN_FLASH) && !defined(CONFIG_ENV_IS_IN_EEPROM)
+	/* default: CONFIG_ENV_IS_NOWHERE */
+	#define CONFIG_ENV_IS_NOWHERE
+	#define	CONFIG_ENV_OFFSET		1024
+	#define CONFIG_ENV_SIZE			(4*1024)	/* env size */
+	/* imls - list all images found in flash, default enable so disable */
+	#undef	CONFIG_CMD_IMLS
+#endif
+
+/*-----------------------------------------------------------------------
+ * PLL
+ */
+
+#define CONFIG_SYS_PLLFIN			24000000UL
+
+/*-----------------------------------------------------------------------
+ * Timer
+ */
+
+#define CONFIG_TIMER_SYS_TICK_CH		0
+
+/*-----------------------------------------------------------------------
+ * GPT
+ */
+#define CONFIG_CMD_GPT
+#define CONFIG_EFI_PARTITION
+#define CONFIG_PARTITION_UUIDS
+#define CONFIG_RANDOM_UUID
+
+#define CONFIG_CMD_DFU
+#define CONFIG_USB_GADGET_DOWNLOAD
+
+#define CONFIG_DISPLAY_BOARDINFO
+
+/* TIZEN THOR downloader support */
+#define CONFIG_CMD_THOR_DOWNLOAD
+#define CONFIG_USB_FUNCTION_THOR
+
+#define CONFIG_USB_FUNCTION_DFU
+#define CONFIG_DFU_MMC
+#define CONFIG_SYS_DFU_DATA_BUF_SIZE SZ_32M
+#define DFU_DEFAULT_POLL_TIMEOUT 300
+
+#define CONFIG_CMD_USB_MASS_STORAGE
+#define CONFIG_USB_FUNCTION_MASS_STORAGE
+
+/*-----------------------------------------------------------------------
+ * Fastboot and USB OTG
+ */
+
+#define CONFIG_USB_FUNCTION_FASTBOOT
+#define CONFIG_CMD_FASTBOOT
+#define CONFIG_FASTBOOT_FLASH
+#define CONFIG_FASTBOOT_FLASH_MMC_DEV   0
+#define CONFIG_FASTBOOT_BUF_SIZE        (CONFIG_SYS_SDRAM_SIZE - SZ_1M)
+#define CONFIG_FASTBOOT_BUF_ADDR        CONFIG_SYS_SDRAM_BASE
+#define CONFIG_USB_GADGET
+#define CONFIG_USB_GADGET_DUALSPEED
+#define CONFIG_USB_GADGET_VBUS_DRAW     0
+#define CONFIG_USB_GADGET_DWC2_OTG
+#define CONFIG_USB_GADGET_NX_UDC_OTG_PHY
+#define CONFIG_USB_GADGET_DOWNLOAD
+#define CONFIG_SYS_CACHELINE_SIZE       64
+#define CONFIG_G_DNL_VENDOR_NUM         0x18d1  /* google */
+#define CONFIG_G_DNL_PRODUCT_NUM        0x0002  /* nexus one */
+#define CONFIG_G_DNL_THOR_VENDOR_NUM	0x04e8
+#define CONFIG_G_DNL_THOR_PRODUCT_NUM	0x685D
+#define CONFIG_G_DNL_UMS_VENDOR_NUM	0x04e8
+#define CONFIG_G_DNL_UMS_PRODUCT_NUM	0x685C
+#define CONFIG_G_DNL_MANUFACTURER       "Samsung Electronics"
+
+/*-----------------------------------------------------------------------
+ * Nexell USB Downloader
+ */
+#define CONFIG_NX_USBDOWN
+
+/*-----------------------------------------------------------------------
+ * PWM
+ */
+#define CONFIG_PWM_NX
+
+/*-----------------------------------------------------------------------
+ * OF_CONTROL
+ */
+
+#define CONFIG_FIT_BEST_MATCH
+#define CONFIG_OF_LIBFDT
+
+/*-----------------------------------------------------------------------
+ * GMAC
+ */
+#define CONFIG_PHY_MICREL
+#define CONFIG_PHY_MICREL_KSZ9031
+
+#define CONFIG_ETHPRIME 		"KSZ9031"
+#define CONFIG_PHY_ADDR 		1
+
+#define CONFIG_DW_ALTDESCRIPTOR
+
+#define CONFIG_PHY_GIGE
+#define CONFIG_MII
+#define CONFIG_CMD_MII
+
+/* NET */
+#define CONFIG_CMD_GEN_ETHADDR
+
+/* FACTORY_INFO */
+#define CONFIG_CMD_FACTORY_INFO
+#define CONFIG_FACTORY_INFO_BUF_ADDR		0x70000000
+#define CONFIG_FACTORY_INFO_START		0x1c00
+#define CONFIG_FACTORY_INFO_SIZE		0x100
+
+/* OTA */
+#if defined(CONFIG_ARTIK_OTA)
+#define CONFIG_FLAG_INFO_ADDR 0x49000000
+#endif
+
+/* MAC Generator */
+#define CONFIG_ARTIK_MAC
+/*-----------------------------------------------------------------------
+ * BOOTCOMMAND
+ */
+#define CONFIG_REVISION_TAG
+
+#define CONFIG_DEFAULT_CONSOLE		"console=ttySAC3,115200n8\0"
+
+#define CONFIG_ROOT_DEV		0
+#define CONFIG_BOOT_PART_SD	1
+#define CONFIG_MODULE_PART_SD	2
+#define CONFIG_ROOT_PART_SD	3
+
+#if !defined(CONFIG_ARTIK_OTA)
+#define CONFIG_BOOT_PART	1
+#define CONFIG_MODULES_PART	2
+#define CONFIG_ROOT_PART	3
+#else
+#define CONFIG_BOOT_PART	2
+#define CONFIG_BOOT1_PART	3
+#define CONFIG_MODULES_PART	5
+#define CONFIG_MODULES1_PART	6
+#define CONFIG_ROOT_PART	7
+#endif
+
+#define CONFIG_SET_DFU_ALT_INFO
+#define CONFIG_SET_DFU_ALT_BUF_LEN	(SZ_1K)
+
+#define CONFIG_DFU_ALT \
+	"bl1-emmcboot.img raw 0x1 0x80;" \
+	"bl1-sdboot.img raw 0x1 0x80;" \
+	"fip-loader-emmc.img raw 0x81 0x280;" \
+	"fip-loader-sd.img raw 0x81 0x280;" \
+	"fip-secure.img raw 0x301 0x600;" \
+	"fip-nonsecure.img raw 0xf01 0x800;" \
+	"/uImage ext4 $rootdev $bootpart;" \
+	"/Image ext4 $rootdev $bootpart;" \
+	"/uInitrd ext4 $rootdev $bootpart;" \
+	"/ramdisk.gz ext4 $rootdev $bootpart;" \
+	"/s5p6818-artik710-raptor-rev03.dtb ext4 $rootdev $bootpart;" \
+	"/s5p6818-artik710-raptor-rev02.dtb ext4 $rootdev $bootpart;" \
+	"/s5p6818-artik710-raptor-rev01.dtb ext4 $rootdev $bootpart;" \
+	"/s5p6818-artik710-explorer.dtb ext4 $rootdev $bootpart;" \
+	"boot part $rootdev $bootpart;" \
+	"modules part $rootdev $modulespart;" \
+	"rootfs part $rootdev $rootpart;" \
+	"params.bin raw 0x1701 0x20;" \
+	"/Image.itb ext4 $rootdev $bootpart\0"
+
+#define CONFIG_EXTRA_ENV_SETTINGS					\
+	"fdt_high=0xffffffffffffffff\0"					\
+	"kerneladdr=0x40080000\0"					\
+	"kernel_file=Image\0"						\
+	"ramdiskaddr=0x49000000\0"					\
+	"ramdisk_file=uInitrd\0"					\
+	"fdtaddr=0x4a000000\0"						\
+	"fdtfile=\0"							\
+	"load_fdt=																	"\
+	"	if test -z \"$fdtfile\"; then 											"\
+	"		loop=$board_rev; 													"\
+	"		number=$board_rev: 													"\
+	"		success=0; 															"\
+	"		until test $loop -eq 0 || test $success -ne 0; do 					"\
+	"			if test $loop -lt 10; then 										"\
+	"				number=0$loop;												"\
+	"			else 															"\
+	"				number=$loop;												"\
+	"			fi;																"\
+	"			ext4size mmc $rootdev:$bootpart 								"\
+	"				s5p6818-artik710-iot-academy-rev${number}.dtb				"\
+	"			&& 																"\
+	"			setexpr success 1;												"\
+	"			setexpr loop $loop - 1;											"\
+	"		done; 																"\
+	"		if test $success -eq 0; then 										"\
+	"			ext4load mmc $rootdev:$bootpart $fdtaddr 						"\
+	"				s5p6818-artik710-raptor-rev03.dtb 							"\
+	"			||																"\
+	"			ext4load mmc $rootdev:$bootpart $fdtaddr 						"\
+	"				s5p6818-artik710-raptor.dtb;								"\
+	"		else 																"\
+	"			ext4load mmc $rootdev:$bootpart $fdtaddr 						"\
+	"				s5p6818-artik710-raptor-rev${number}.dtb;					"\
+	"		fi;																	"\
+	"	else 																	"\
+	"		ext4load mmc $rootdev:$bootpart $fdtaddr $fdtfile;					"\
+	"	fi; 																	"\
+	"	setenv success; setenv number; setenv loop;\0							"\
+	"bootdelay=" __stringify(CONFIG_BOOTDELAY) "\0"			\
+	"console=" CONFIG_DEFAULT_CONSOLE				\
+	"consoleon=setenv console=" CONFIG_DEFAULT_CONSOLE		\
+		"; saveenv; reset\0"					\
+	"consoleoff=setenv console=ram; saveenv; reset\0"		\
+	"rootdev=" __stringify(CONFIG_ROOT_DEV) "\0"			\
+	"rootpart=" __stringify(CONFIG_ROOT_PART) "\0"			\
+	"bootpart=" __stringify(CONFIG_BOOT_PART) "\0"			\
+	"rescue=0\0"							\
+	"root_rw=rw\0"							\
+	"opts=loglevel=4\0"						\
+	"rootfs_type=ext4\0"						\
+	"lcd1_0=s6e8fa0\0"						\
+	"lcd2_0=gst7d0038\0"						\
+	"lcd_panel=s6e8fa0\0"						\
+	"sdrecovery=run boot_cmd_sdboot;"				\
+		"sd_recovery mmc 1:3 48000000 partmap_emmc.txt\0"	\
+	"factory_load=factory_info load mmc 0 "				\
+		__stringify(CONFIG_FACTORY_INFO_START) " "		\
+		__stringify(CONFIG_FACTORY_INFO_SIZE) "\0"		\
+	"factory_save=factory_info save mmc 0 "				\
+		__stringify(CONFIG_FACTORY_INFO_START) " "		\
+		__stringify(CONFIG_FACTORY_INFO_SIZE) "\0"		\
+	"factory_set_ethaddr=run factory_load; gen_eth_addr ;"		\
+		"factory_info write ethaddr $ethaddr;"			\
+		"run factory_save\0"					\
+	"load_args=run factory_load; setenv bootargs ${console} "	\
+		"root=/dev/mmcblk${rootdev}p${rootpart} ${root_rw} "	\
+		"rootfstype=${rootfs_type} ${opts} ${recoverymode} "	\
+		"drm_panel=$lcd_panel "					\
+		"${ota} bootfrom=${bootpart} rescue=${rescue};\0"	\
+	"load_kernel="							\
+		"ret=0; "						\
+		"ext4load mmc ${rootdev}:${bootpart} $kerneladdr $kernel_file && setexpr ret 1; " \
+		"if test $ret -eq 0; then "				\
+			"if test $bootpart -eq 2; then "		\
+				"setenv bootpart 3; "			\
+			"else setenv bootpart 2; "			\
+			"fi; "						\
+			"setenv rescue 1; "				\
+			"ext4load mmc ${rootdev}:${bootpart} $kerneladdr $kernel_file; " \
+			"run load_args; "				\
+		"fi;\0"							\
+	"load_initrd=ext4load mmc ${rootdev}:${bootpart} $ramdiskaddr $ramdisk_file\0" \
+	"boot_cmd_initrd="						\
+		"run load_kernel; run load_fdt; run load_initrd;"	\
+		"booti $kerneladdr $ramdiskaddr $fdtaddr\0"		\
+	"boot_cmd_mmcboot="						\
+		"run load_kernel; run load_fdt;"			\
+		"booti $kerneladdr - $fdtaddr\0"			\
+	"boot_cmd_sdboot="						\
+		"setenv bootpart " __stringify(CONFIG_BOOT_PART_SD)"; "	\
+		"setenv rootpart " __stringify(CONFIG_ROOT_PART_SD)";\0"	\
+	"ramfsboot=run load_args; run boot_cmd_initrd\0"		\
+	"mmcboot=run load_args; run boot_cmd_mmcboot\0"			\
+	"recovery_cmd=run sdrecovery; setenv recoverymode recovery\0"	\
+	"recoveryboot=run recovery_cmd; run ramfsboot\0"		\
+	"hwtestboot=setenv rootdev 1;"					\
+		"setenv opts rootfstype=ext4 rootwait loglevel=4;"	\
+		"setenv fdtfile s5p6818-artik710-explorer.dtb; "	\
+		"run mmcboot\0"						\
+	"hwtest_recoveryboot=run recovery_cmd; run hwtestboot\0"	\
+	"bootcmd=run ramfsboot\0"
+
+#endif /* __CONFIG_H__ */
nfig b/board/nexell/s5p6818/Kconfig
index e1cdb72..61dfbef 100644
--- a/board/nexell/s5p6818/Kconfig
+++ b/board/nexell/s5p6818/Kconfig
@@ -11,6 +11,11 @@ config TARGET_ARTIK710_RAPTOR
 	help
 	  Support for artik710_raptor platform.

+config TARGET_ARTIK710_IOT_ACADEMY
+	bool "ARTIK710_IOT_ACADEMY"
+	help
+	  Support for artik710 based IoT Academy board.
+
 endchoice

 config SYS_VENDOR
diff --git a/board/nexell/s5p6818/Makefile b/board/nexell/s5p6818/Makefile
index 5fec963..f8af9b8 100644
--- a/board/nexell/s5p6818/Makefile
+++ b/board/nexell/s5p6818/Makefile
@@ -7,3 +7,4 @@

 obj-$(CONFIG_TARGET_S5P6818_DRONE)	+= drone/
 obj-$(CONFIG_TARGET_ARTIK710_RAPTOR)	+= artik710_raptor/
+obj-$(CONFIG_TARGET_ARTIK710_IOT_ACADEMY)	+= artik710_iot_academy/
diff --git a/board/nexell/s5p6818/artik710_iot_academy/Makefile b/board/nexell/s5p6818/artik710_iot_academy/Makefile
new file mode 100644
index 0000000..032afb0
--- /dev/null
+++ b/board/nexell/s5p6818/artik710_iot_academy/Makefile
@@ -0,0 +1,8 @@
+#
+# Copyright (C) 2017  Samsung Electronics Co., Ltd.
+# Author: Odisharia Georgiy <g.odishariia@partner.samsung.com>
+#
+# SPDX-License-Identifier:      GPL-2.0+
+#
+
+obj-y	:= board.o
diff --git a/board/nexell/s5p6818/artik710_iot_academy/board.c b/board/nexell/s5p6818/artik710_iot_academy/board.c
new file mode 100644
index 0000000..6e94fc9
--- /dev/null
+++ b/board/nexell/s5p6818/artik710_iot_academy/board.c
@@ -0,0 +1,347 @@
+/*
+ * Copyright (C) 2017  Samsung Electronics Co., Ltd.
+ * Author: Odisharia Georgiy <g.odishariia@partner.samsung.com>
+ *
+ * SPDX-License-Identifier:      GPL-2.0+
+ */
+
+#include <config.h>
+#include <common.h>
+#include <asm/io.h>
+
+#include <asm/arch/nexell.h>
+#include <asm/arch/nx_gpio.h>
+#include <memalign.h>
+
+#ifdef CONFIG_DM_PMIC_NXE2000
+#include <dm.h>
+#include <dm/uclass-internal.h>
+#include <power/pmic.h>
+#include <power/nxe2000.h>
+#endif
+
+#ifdef CONFIG_USB_GADGET
+#include <usb.h>
+#endif
+
+#ifdef CONFIG_SENSORID_ARTIK
+#include <sensorid.h>
+#include <sensorid_artik.h>
+#endif
+
+#ifdef CONFIG_ARTIK_OTA
+#include <artik_ota.h>
+#endif
+
+#ifdef CONFIG_ARTIK_MAC
+#include <artik_mac.h>
+#endif
+
+DECLARE_GLOBAL_DATA_PTR;
+
+#ifdef CONFIG_REVISION_TAG
+u32 board_rev;
+
+u32 get_board_rev(void)
+{
+	return board_rev;
+}
+
+static void check_hw_revision(void)
+{
+	u32 val = 0;
+
+	val |= nx_gpio_get_input_value(4, 6);
+	val <<= 1;
+
+	val |= nx_gpio_get_input_value(4, 5);
+	val <<= 1;
+
+	val |= nx_gpio_get_input_value(4, 4);
+
+	board_rev = val;
+}
+
+static void set_board_rev(u32 revision)
+{
+	char info[64] = {0, };
+
+	snprintf(info, ARRAY_SIZE(info), "%d", revision);
+	setenv("board_rev", info);
+}
+#endif
+
+#ifdef CONFIG_DISPLAY_BOARDINFO
+int checkboard(void)
+{
+	printf("\nBoard: ARTIK710 Raptor\n");
+
+	return 0;
+}
+#endif
+
+#ifdef CONFIG_SENSORID_ARTIK
+static void get_sensorid(u32 revision)
+{
+	static struct udevice *dev;
+	uint16_t buf[5] = {0, };
+	char panel_env[64], *panel_str;
+	bool found_panel = false;
+	int i, ret;
+
+	if (revision < 3)
+		return;
+
+	ret = uclass_get_device_by_name(UCLASS_SENSOR_ID, "sensor_id@36", &dev);
+	if (ret < 0) {
+		printf("Cannot find sensor_id device\n");
+		return;
+	}
+
+	ret = sensorid_get_type(dev, &buf[0], 4);
+	if (ret < 0) {
+		printf("Cannot read sensor type - %d\n", ret);
+		return;
+	}
+
+	ret = sensorid_get_addon(dev, &buf[4]);
+	if (ret < 0) {
+		printf("Cannot read add-on board type - %d\n", ret);
+		return;
+	}
+
+	printf("LCD#1:0x%X, LCD#2:0x%X, CAM#1:0x%X, CAM#2:0x%X\n",
+			buf[0], buf[1], buf[2], buf[3]);
+	printf("ADD-ON-BOARD : 0x%X\n", buf[4]);
+
+	for (i = 0; i < SENSORID_LCD_MAX; i++) {
+		if (buf[i] != SENSORID_LCD_NONE) {
+			snprintf(panel_env, sizeof(panel_env), "lcd%d_%d",
+				 i + 1, buf[i]);
+			panel_str = getenv(panel_env);
+			if (panel_str) {
+				setenv("lcd_panel", panel_str);
+				found_panel = true;
+			}
+			break;
+		}
+	}
+
+	if (!found_panel)
+		setenv("lcd_panel", "NONE");
+}
+#endif
+
+#ifdef CONFIG_SET_DFU_ALT_INFO
+void set_dfu_alt_info(char *interface, char *devstr)
+{
+	size_t buf_size = CONFIG_SET_DFU_ALT_BUF_LEN;
+	ALLOC_CACHE_ALIGN_BUFFER(char, buf, buf_size);
+
+	snprintf(buf, buf_size, "setenv dfu_alt_info \"%s\"", CONFIG_DFU_ALT);
+	run_command(buf, 0);
+}
+#endif
+
+/*------------------------------------------------------------------------------
+ * intialize nexell soc and board status.
+ */
+
+static void nx_phy_init(void)
+{
+#ifdef CONFIG_SENSORID_ARTIK
+	/* I2C-GPIO for AVR */
+	nx_gpio_set_pad_function(1, 11, 2);     /* GPIO */
+	nx_gpio_set_pad_function(1, 18, 2);     /* GPIO */
+#endif
+}
+
+/* call from u-boot */
+int board_early_init_f(void)
+{
+	return 0;
+}
+
+#ifdef CONFIG_VIDEO_NX_LVDS
+void board_display_reset(void)
+{
+	nx_gpio_set_pad_function(4, 3, 0);	/* E_3 : LVDS RESET */
+	nx_gpio_set_output_enable(4, 3, 0);
+	mdelay(1);
+	nx_gpio_set_output_enable(4, 3, 1);
+}
+#endif
+
+int mmc_get_env_dev(void)
+{
+	int port_num;
+	int boot_mode = readl(PHY_BASEADDR_CLKPWR + SYSRSTCONFIG);
+
+	if ((boot_mode & BOOTMODE_MASK) == BOOTMODE_SDMMC) {
+		port_num = readl(SCR_ARM_SECOND_BOOT_REG1);
+
+		if (port_num == EMMC_PORT_NUM)
+			return 0;
+		else if (port_num == SD_PORT_NUM)
+			return 1;
+	} else if ((boot_mode & BOOTMODE_MASK) == BOOTMODE_USB) {
+		return 0;
+	}
+
+	return -1;
+}
+
+int board_init(void)
+{
+#ifdef CONFIG_REVISION_TAG
+	check_hw_revision();
+	printf("HW Revision:\t%d\n", board_rev);
+
+#endif
+
+	nx_phy_init();
+
+#ifdef CONFIG_VIDEO_NX_LVDS
+	board_display_reset();
+#endif
+
+	return 0;
+}
+
+/* u-boot dram initialize  */
+int dram_init(void)
+{
+	gd->ram_size = CONFIG_SYS_SDRAM_SIZE;
+	return 0;
+}
+
+/* u-boot dram board specific */
+void dram_init_banksize(void)
+{
+	/* set global data memory */
+	gd->bd->bi_arch_number = machine_arch_type;
+	gd->bd->bi_boot_params = CONFIG_SYS_SDRAM_BASE + 0x00000100;
+
+	gd->bd->bi_dram[0].start = CONFIG_SYS_SDRAM_BASE;
+	gd->bd->bi_dram[0].size  = CONFIG_SYS_SDRAM_SIZE;
+}
+
+#ifdef CONFIG_DM_PMIC_NXE2000
+void pmic_init(void)
+{
+	static struct udevice *dev;
+	int ret = -ENODEV;
+	uint8_t bit_mask = 0;
+
+#ifdef CONFIG_REVISION_TAG
+	if (get_board_rev() >= 3) {
+		ret = pmic_get("nxe2000_gpio@32", &dev);
+		if (ret)
+			printf("Can't get PMIC: %s!\n", "nxe2000_gpio@32");
+	} else {
+#endif
+		ret = pmic_get("nxe2000@32", &dev);
+		if (ret)
+			printf("Can't get PMIC: %s!\n", "nxe2000@32");
+#ifdef CONFIG_REVISION_TAG
+	}
+#endif
+
+	bit_mask = pmic_reg_read(dev, NXE2000_REG_PWRONTIMSET);
+	bit_mask &= ~(0x1 << NXE2000_POS_PWRONTIMSET_OFF_JUDGE_PWRON);
+	bit_mask |= (0x0 << NXE2000_POS_PWRONTIMSET_OFF_JUDGE_PWRON);
+	ret = pmic_write(dev, NXE2000_REG_PWRONTIMSET, &bit_mask, 1);
+	if (ret)
+		printf("Can't write PMIC REG: %d!\n", NXE2000_REG_PWRONTIMSET);
+
+	bit_mask = 0x00;
+	ret = pmic_reg_write(dev, (u32)NXE2000_REG_BANKSEL, (u32)bit_mask);
+	if (ret)
+		printf("Can't write PMIC register: %d!\n", NXE2000_REG_BANKSEL);
+
+	bit_mask = ((0 << NXE2000_POS_DCxCTL2_DCxOSC) |
+			(0 << NXE2000_POS_DCxCTL2_DCxSR) |
+			(3 << NXE2000_POS_DCxCTL2_DCxLIM) |
+			(0 << NXE2000_POS_DCxCTL2_DCxLIMSDEN));
+	ret = pmic_write(dev, NXE2000_REG_DC1CTL2, &bit_mask, 1);
+	if (ret)
+		printf("Can't write PMIC register: %d!\n", NXE2000_REG_DC1CTL2);
+
+	bit_mask = ((0 << NXE2000_POS_DCxCTL2_DCxOSC) |
+			(0 << NXE2000_POS_DCxCTL2_DCxSR) |
+			(3 << NXE2000_POS_DCxCTL2_DCxLIM) |
+			(0 << NXE2000_POS_DCxCTL2_DCxLIMSDEN));
+	ret = pmic_write(dev, NXE2000_REG_DC2CTL2, &bit_mask, 1);
+	if (ret)
+		printf("Can't write PMIC register: %d!\n", NXE2000_REG_DC2CTL2);
+
+	bit_mask = ((0 << NXE2000_POS_DCxCTL2_DCxOSC) |
+			(0 << NXE2000_POS_DCxCTL2_DCxSR) |
+			(1 << NXE2000_POS_DCxCTL2_DCxLIM) |
+			(1 << NXE2000_POS_DCxCTL2_DCxLIMSDEN));
+	ret = pmic_write(dev, NXE2000_REG_DC3CTL2, &bit_mask, 1);
+	if (ret)
+		printf("Can't write PMIC register: %d!\n", NXE2000_REG_DC3CTL2);
+
+	bit_mask = ((0 << NXE2000_POS_DCxCTL2_DCxOSC) |
+			(0 << NXE2000_POS_DCxCTL2_DCxSR) |
+			(1 << NXE2000_POS_DCxCTL2_DCxLIM) |
+			(1 << NXE2000_POS_DCxCTL2_DCxLIMSDEN));
+	ret = pmic_write(dev, NXE2000_REG_DC4CTL2, &bit_mask, 1);
+	if (ret)
+		printf("Can't write PMIC register: %d!\n", NXE2000_REG_DC4CTL2);
+
+	bit_mask = ((0 << NXE2000_POS_DCxCTL2_DCxOSC) |
+			(0 << NXE2000_POS_DCxCTL2_DCxSR) |
+			(1 << NXE2000_POS_DCxCTL2_DCxLIM) |
+			(1 << NXE2000_POS_DCxCTL2_DCxLIMSDEN));
+	ret = pmic_write(dev, NXE2000_REG_DC5CTL2, &bit_mask, 1);
+	if (ret)
+		printf("Can't write PMIC register: %d!\n", NXE2000_REG_DC5CTL2);
+
+	bit_mask = (1 << NXE2000_POS_CHGCTL1_SUSPEND);
+	ret = pmic_write(dev, NXE2000_REG_CHGCTL1, &bit_mask, 1);
+	if (ret)
+		printf("Can't write PMIC register: %d!\n", NXE2000_REG_CHGCTL1);
+}
+#endif
+
+int board_late_init(void)
+{
+#ifdef CONFIG_DM_PMIC_NXE2000
+	pmic_init();
+#endif
+#ifdef CONFIG_REVISION_TAG
+	set_board_rev(board_rev);
+#endif
+#ifdef CONFIG_CMD_FACTORY_INFO
+	run_command("run factory_load", 0);
+#endif
+#ifdef CONFIG_ARTIK_MAC
+	generate_mac();
+#endif
+#ifdef CONFIG_SENSORID_ARTIK
+	get_sensorid(board_rev);
+#endif
+#ifdef CONFIG_ARTIK_OTA
+	check_ota_update();
+#endif
+	return 0;
+}
+
+#ifdef CONFIG_USB_GADGET
+int g_dnl_bind_fixup(struct usb_device_descriptor *dev, const char *name)
+{
+	if (!strcmp(name, "usb_dnl_thor")) {
+		put_unaligned(CONFIG_G_DNL_THOR_VENDOR_NUM, &dev->idVendor);
+		put_unaligned(CONFIG_G_DNL_THOR_PRODUCT_NUM, &dev->idProduct);
+	} else if (!strcmp(name, "usb_dnl_ums")) {
+		put_unaligned(CONFIG_G_DNL_UMS_VENDOR_NUM, &dev->idVendor);
+		put_unaligned(CONFIG_G_DNL_UMS_PRODUCT_NUM, &dev->idProduct);
+	} else {
+		put_unaligned(CONFIG_G_DNL_VENDOR_NUM, &dev->idVendor);
+		put_unaligned(CONFIG_G_DNL_PRODUCT_NUM, &dev->idProduct);
+	}
+	return 0;
+}
+#endif
diff --git a/configs/artik710_iot_academy_defconfig b/configs/artik710_iot_academy_defconfig
new file mode 100644
index 0000000..6316368
--- /dev/null
+++ b/configs/artik710_iot_academy_defconfig
@@ -0,0 +1,46 @@
+CONFIG_ARM=y
+CONFIG_SYS_CONFIG_NAME="artik710_iot_academy"
+CONFIG_ARCH_NEXELL=y
+CONFIG_ARCH_S5P6818=y
+CONFIG_ARTIK_OTA=y
+CONFIG_TARGET_ARTIK710_IOT_ACADEMY=y
+# CONFIG_SYS_MALLOC_F is not set
+CONFIG_DM_I2C=y
+CONFIG_DM_GPIO=y
+CONFIG_DEFAULT_DEVICE_TREE="s5p6818-artik710-raptor"
+# CONFIG_SYS_MALLOC_CLEAR_ON_INIT is not set
+CONFIG_FIT=y
+# CONFIG_CMD_IMI is not set
+# CONFIG_CMD_IMLS is not set
+# CONFIG_CMD_FLASH is not set
+CONFIG_CMD_USB=y
+# CONFIG_CMD_FPGA is not set
+CONFIG_CMD_GPIO=y
+# CONFIG_CMD_NFS is not set
+CONFIG_CMD_PING=y
+CONFIG_CMD_FDISK=y
+CONFIG_CMD_EXT4_IMG_WRITE=y
+CONFIG_CMD_SD_RECOVERY=y
+CONFIG_CMD_PMIC=y
+CONFIG_CMD_REGULATOR=y
+CONFIG_OF_CONTROL=y
+CONFIG_OF_EMBED=y
+CONFIG_NET_RANDOM_ETHADDR=y
+CONFIG_DM=y
+CONFIG_NX_GPIO=y
+CONFIG_DM_I2C_GPIO=y
+CONFIG_SYS_I2C_NEXELL=y
+CONFIG_SENSORID=y
+CONFIG_SENSORID_ARTIK=y
+CONFIG_DM_ETH=y
+CONFIG_ETH_DESIGNWARE=y
+CONFIG_PINCTRL=y
+CONFIG_DM_PMIC=y
+CONFIG_DM_PMIC_NXE2000=y
+CONFIG_DM_REGULATOR=y
+CONFIG_DM_REGULATOR_NXE2000=y
+CONFIG_USB=y
+CONFIG_DM_USB=y
+CONFIG_USB_EHCI_HCD=y
+CONFIG_USB_STORAGE=y
+CONFIG_ERRNO_STR=y
diff --git a/include/configs/artik710_iot_academy.h b/include/configs/artik710_iot_academy.h
new file mode 100644
index 0000000..04360be
--- /dev/null
+++ b/include/configs/artik710_iot_academy.h
@@ -0,0 +1,474 @@
+/*
+ * Copyright (C) 2017  Samsung Electronics Co., Ltd.
+ * Author: Odisharia Georgiy <g.odishariia@partner.samsung.com>
+ *
+ * SPDX-License-Identifier:      GPL-2.0+
+ */
+
+#ifndef __CONFIG_H__
+#define __CONFIG_H__
+
+#include <linux/sizes.h>
+
+/*-----------------------------------------------------------------------
+ *  u-boot-2016.01
+ */
+#define CONFIG_SYS_LDSCRIPT "arch/arm/cpu/armv8/u-boot.lds"
+
+#define	CONFIG_MACH_S5P6818
+
+/*-----------------------------------------------------------------------
+ *  System memory Configuration
+ */
+
+#define	CONFIG_SYS_TEXT_BASE			0x43C00000
+/* init and run stack pointer */
+#define	CONFIG_SYS_INIT_SP_ADDR			CONFIG_SYS_TEXT_BASE
+
+/* malloc() pool */
+#define	CONFIG_MEM_MALLOC_START			0x44000000
+#define CONFIG_MEM_MALLOC_LENGTH	(CONFIG_ENV_SIZE + (1 << 20) +	\
+					CONFIG_SYS_DFU_DATA_BUF_SIZE * 2 + \
+					(8 << 20))
+
+/* when CONFIG_LCD */
+#define CONFIG_FB_ADDR				0x46000000
+
+/* Download OFFSET */
+#define CONFIG_MEM_LOAD_ADDR			0x48000000
+
+#define CONFIG_SYS_BOOTM_LEN    (64 << 20)      /* Increase max gunzip size */
+
+/* AARCH64 */
+#define COUNTER_FREQUENCY			200000000
+#define CPU_RELEASE_ADDR			CONFIG_SYS_INIT_SP_ADDR
+
+/*-----------------------------------------------------------------------
+ *  High Level System Configuration
+ */
+
+/* Not used: not need IRQ/FIQ stuff	*/
+#undef  CONFIG_USE_IRQ
+/* decrementer freq: 1ms ticks */
+#define CONFIG_SYS_HZ				1000
+
+/* board_init_f */
+#define	CONFIG_SYS_SDRAM_BASE			0x40000000
+#define	CONFIG_SYS_SDRAM_SIZE			0x3DF00000
+
+/* dram 1 bank num */
+#define CONFIG_NR_DRAM_BANKS			1
+
+/* relocate_code and  board_init_r */
+#define	CONFIG_SYS_MALLOC_END			(CONFIG_MEM_MALLOC_START + \
+						 CONFIG_MEM_MALLOC_LENGTH)
+/* board_init_f, more than 2M for ubifs */
+#define CONFIG_SYS_MALLOC_LEN \
+	(CONFIG_MEM_MALLOC_LENGTH - 0x8000)
+
+/* kernel load address */
+#define CONFIG_SYS_LOAD_ADDR			CONFIG_MEM_LOAD_ADDR
+
+/* memtest works on */
+#define CONFIG_SYS_MEMTEST_START		CONFIG_SYS_MALLOC_END
+#define CONFIG_SYS_MEMTEST_END			((ulong)CONFIG_SYS_SDRAM_BASE \
+						 + (ulong)CONFIG_SYS_SDRAM_SIZE)
+
+/*-----------------------------------------------------------------------
+ *  System initialize options (board_init_f)
+ */
+
+/* board_init_f->init_sequence, call arch_cpu_init */
+#define CONFIG_ARCH_CPU_INIT
+/* board_init_f->init_sequence, call board_early_init_f */
+#define	CONFIG_BOARD_EARLY_INIT_F
+/* board_init_r, call board_early_init_f */
+#define	CONFIG_BOARD_LATE_INIT
+/* board_init_f->init_sequence, call print_cpuinfo */
+#define	CONFIG_DISPLAY_CPUINFO
+/* board_init_f, CONFIG_SYS_ICACHE_OFF */
+#define	CONFIG_SYS_DCACHE_OFF
+/* board_init_r, call arch_misc_init */
+#define	CONFIG_ARCH_MISC_INIT
+/*#define	CONFIG_SYS_ICACHE_OFF*/
+
+/*-----------------------------------------------------------------------
+ *	U-Boot default cmd
+ */
+#define	CONFIG_CMD_MEMTEST
+
+/*-----------------------------------------------------------------------
+ *	U-Boot Environments
+ */
+/* refer to common/env_common.c	*/
+#define CONFIG_BOOTDELAY			3
+
+/*-----------------------------------------------------------------------
+ * Miscellaneous configurable options
+ */
+#ifdef CONFIG_SYS_PROMPT
+#undef CONFIG_SYS_PROMPT
+/* Monitor Command Prompt   */
+#define CONFIG_SYS_PROMPT			"artik710# "
+#endif
+/* undef to save memory	   */
+#define CONFIG_SYS_LONGHELP
+/* Console I/O Buffer Size  */
+#define CONFIG_SYS_CBSIZE			1024
+/* Print Buffer Size */
+#define CONFIG_SYS_PBSIZE			(CONFIG_SYS_CBSIZE + \
+						 sizeof(CONFIG_SYS_PROMPT)+16)
+/* max number of command args   */
+#define CONFIG_SYS_MAXARGS			16
+/* Boot Argument Buffer Size    */
+#define CONFIG_SYS_BARGSIZE			CONFIG_SYS_CBSIZE
+
+/*-----------------------------------------------------------------------
+ * allow to overwrite serial and ethaddr
+ */
+#define CONFIG_ENV_OVERWRITE
+#define CONFIG_SYS_HUSH_PARSER			/* use "hush" command parser */
+#ifdef CONFIG_SYS_HUSH_PARSER
+#define CONFIG_SYS_PROMPT_HUSH_PS2	"> "
+#endif
+
+/*-----------------------------------------------------------------------
+ * Etc Command definition
+ */
+#define	CONFIG_CMD_IMI				/* image info	*/
+#define CONFIG_CMDLINE_EDITING			/* add command line history */
+#define	CONFIG_CMDLINE_TAG			/* use bootargs commandline */
+#undef	CONFIG_BOOTM_NETBSD
+#undef	CONFIG_BOOTM_RTEMS
+#define CONFIG_INITRD_TAG
+
+/*-----------------------------------------------------------------------
+ * serial console configuration
+ */
+#define CONFIG_S5P_SERIAL
+#define CONFIG_S5P_SERIAL_INDEX			3
+#define CONFIG_S5P_SERIAL_CLOCK			50000000
+
+#define CONFIG_BAUDRATE				115200
+#define CONFIG_SYS_BAUDRATE_TABLE \
+		{ 9600, 19200, 38400, 57600, 115200 }
+#define CONFIG_S5P_SERIAL_FLUSH_ON_INIT
+
+#define CONFIG_UART_CLKGEN_CLOCK_HZ		CONFIG_S5P_SERIAL_CLOCK
+
+/*-----------------------------------------------------------------------
+ * NOR FLASH
+ */
+#define	CONFIG_SYS_NO_FLASH
+
+/*-----------------------------------------------------------------------
+ * SD/MMC
+ */
+
+#define CONFIG_GENERIC_MMC
+#define CONFIG_MMC
+#define CONFIG_DWMMC
+#define CONFIG_NEXELL_DWMMC
+#define CONFIG_BOUNCE_BUFFER
+#define CONFIG_CMD_MMC
+
+#if defined(CONFIG_MMC)
+#define CONFIG_2NDBOOT_OFFSET		512
+#define CONFIG_2NDBOOT_SIZE		(64*1024)
+#define CONFIG_FIP_OFFSET		(CONFIG_2NDBOOT_OFFSET +\
+					 CONFIG_2NDBOOT_SIZE)
+#define CONFIG_FIP_SIZE			(2880*1024)
+#define CONFIG_ENV_IS_IN_MMC
+#define CONFIG_SYS_MMC_ENV_DEV		0
+#define	CONFIG_ENV_OFFSET		(CONFIG_FIP_OFFSET +\
+					 CONFIG_FIP_SIZE)
+#define CONFIG_ENV_SIZE			(16*1024)	/* env size */
+#endif
+
+#if defined(CONFIG_MMC)
+#define CONFIG_DOS_PARTITION
+#define CONFIG_CMD_FAT
+#define CONFIG_FS_FAT
+#define CONFIG_FAT_WRITE
+
+#define CONFIG_CMD_EXT4
+#define CONFIG_CMD_EXT4_WRITE
+#define CONFIG_FS_EXT4
+#define CONFIG_EXT4_WRITE
+#endif
+
+/*-----------------------------------------------------------------------
+ * Default environment organization
+ */
+#if !defined(CONFIG_ENV_IS_IN_MMC) && !defined(CONFIG_ENV_IS_IN_NAND) && \
+	!defined(CONFIG_ENV_IS_IN_FLASH) && !defined(CONFIG_ENV_IS_IN_EEPROM)
+	/* default: CONFIG_ENV_IS_NOWHERE */
+	#define CONFIG_ENV_IS_NOWHERE
+	#define	CONFIG_ENV_OFFSET		1024
+	#define CONFIG_ENV_SIZE			(4*1024)	/* env size */
+	/* imls - list all images found in flash, default enable so disable */
+	#undef	CONFIG_CMD_IMLS
+#endif
+
+/*-----------------------------------------------------------------------
+ * PLL
+ */
+
+#define CONFIG_SYS_PLLFIN			24000000UL
+
+/*-----------------------------------------------------------------------
+ * Timer
+ */
+
+#define CONFIG_TIMER_SYS_TICK_CH		0
+
+/*-----------------------------------------------------------------------
+ * GPT
+ */
+#define CONFIG_CMD_GPT
+#define CONFIG_EFI_PARTITION
+#define CONFIG_PARTITION_UUIDS
+#define CONFIG_RANDOM_UUID
+
+#define CONFIG_CMD_DFU
+#define CONFIG_USB_GADGET_DOWNLOAD
+
+#define CONFIG_DISPLAY_BOARDINFO
+
+/* TIZEN THOR downloader support */
+#define CONFIG_CMD_THOR_DOWNLOAD
+#define CONFIG_USB_FUNCTION_THOR
+
+#define CONFIG_USB_FUNCTION_DFU
+#define CONFIG_DFU_MMC
+#define CONFIG_SYS_DFU_DATA_BUF_SIZE SZ_32M
+#define DFU_DEFAULT_POLL_TIMEOUT 300
+
+#define CONFIG_CMD_USB_MASS_STORAGE
+#define CONFIG_USB_FUNCTION_MASS_STORAGE
+
+/*-----------------------------------------------------------------------
+ * Fastboot and USB OTG
+ */
+
+#define CONFIG_USB_FUNCTION_FASTBOOT
+#define CONFIG_CMD_FASTBOOT
+#define CONFIG_FASTBOOT_FLASH
+#define CONFIG_FASTBOOT_FLASH_MMC_DEV   0
+#define CONFIG_FASTBOOT_BUF_SIZE        (CONFIG_SYS_SDRAM_SIZE - SZ_1M)
+#define CONFIG_FASTBOOT_BUF_ADDR        CONFIG_SYS_SDRAM_BASE
+#define CONFIG_USB_GADGET
+#define CONFIG_USB_GADGET_DUALSPEED
+#define CONFIG_USB_GADGET_VBUS_DRAW     0
+#define CONFIG_USB_GADGET_DWC2_OTG
+#define CONFIG_USB_GADGET_NX_UDC_OTG_PHY
+#define CONFIG_USB_GADGET_DOWNLOAD
+#define CONFIG_SYS_CACHELINE_SIZE       64
+#define CONFIG_G_DNL_VENDOR_NUM         0x18d1  /* google */
+#define CONFIG_G_DNL_PRODUCT_NUM        0x0002  /* nexus one */
+#define CONFIG_G_DNL_THOR_VENDOR_NUM	0x04e8
+#define CONFIG_G_DNL_THOR_PRODUCT_NUM	0x685D
+#define CONFIG_G_DNL_UMS_VENDOR_NUM	0x04e8
+#define CONFIG_G_DNL_UMS_PRODUCT_NUM	0x685C
+#define CONFIG_G_DNL_MANUFACTURER       "Samsung Electronics"
+
+/*-----------------------------------------------------------------------
+ * Nexell USB Downloader
+ */
+#define CONFIG_NX_USBDOWN
+
+/*-----------------------------------------------------------------------
+ * PWM
+ */
+#define CONFIG_PWM_NX
+
+/*-----------------------------------------------------------------------
+ * OF_CONTROL
+ */
+
+#define CONFIG_FIT_BEST_MATCH
+#define CONFIG_OF_LIBFDT
+
+/*-----------------------------------------------------------------------
+ * GMAC
+ */
+#define CONFIG_PHY_MICREL
+#define CONFIG_PHY_MICREL_KSZ9031
+
+#define CONFIG_ETHPRIME 		"KSZ9031"
+#define CONFIG_PHY_ADDR 		1
+
+#define CONFIG_DW_ALTDESCRIPTOR
+
+#define CONFIG_PHY_GIGE
+#define CONFIG_MII
+#define CONFIG_CMD_MII
+
+/* NET */
+#define CONFIG_CMD_GEN_ETHADDR
+
+/* FACTORY_INFO */
+#define CONFIG_CMD_FACTORY_INFO
+#define CONFIG_FACTORY_INFO_BUF_ADDR		0x70000000
+#define CONFIG_FACTORY_INFO_START		0x1c00
+#define CONFIG_FACTORY_INFO_SIZE		0x100
+
+/* OTA */
+#if defined(CONFIG_ARTIK_OTA)
+#define CONFIG_FLAG_INFO_ADDR 0x49000000
+#endif
+
+/* MAC Generator */
+#define CONFIG_ARTIK_MAC
+/*-----------------------------------------------------------------------
+ * BOOTCOMMAND
+ */
+#define CONFIG_REVISION_TAG
+
+#define CONFIG_DEFAULT_CONSOLE		"console=ttySAC3,115200n8\0"
+
+#define CONFIG_ROOT_DEV		0
+#define CONFIG_BOOT_PART_SD	1
+#define CONFIG_MODULE_PART_SD	2
+#define CONFIG_ROOT_PART_SD	3
+
+#if !defined(CONFIG_ARTIK_OTA)
+#define CONFIG_BOOT_PART	1
+#define CONFIG_MODULES_PART	2
+#define CONFIG_ROOT_PART	3
+#else
+#define CONFIG_BOOT_PART	2
+#define CONFIG_BOOT1_PART	3
+#define CONFIG_MODULES_PART	5
+#define CONFIG_MODULES1_PART	6
+#define CONFIG_ROOT_PART	7
+#endif
+
+#define CONFIG_SET_DFU_ALT_INFO
+#define CONFIG_SET_DFU_ALT_BUF_LEN	(SZ_1K)
+
+#define CONFIG_DFU_ALT \
+	"bl1-emmcboot.img raw 0x1 0x80;" \
+	"bl1-sdboot.img raw 0x1 0x80;" \
+	"fip-loader-emmc.img raw 0x81 0x280;" \
+	"fip-loader-sd.img raw 0x81 0x280;" \
+	"fip-secure.img raw 0x301 0x600;" \
+	"fip-nonsecure.img raw 0xf01 0x800;" \
+	"/uImage ext4 $rootdev $bootpart;" \
+	"/Image ext4 $rootdev $bootpart;" \
+	"/uInitrd ext4 $rootdev $bootpart;" \
+	"/ramdisk.gz ext4 $rootdev $bootpart;" \
+	"/s5p6818-artik710-raptor-rev03.dtb ext4 $rootdev $bootpart;" \
+	"/s5p6818-artik710-raptor-rev02.dtb ext4 $rootdev $bootpart;" \
+	"/s5p6818-artik710-raptor-rev01.dtb ext4 $rootdev $bootpart;" \
+	"/s5p6818-artik710-explorer.dtb ext4 $rootdev $bootpart;" \
+	"boot part $rootdev $bootpart;" \
+	"modules part $rootdev $modulespart;" \
+	"rootfs part $rootdev $rootpart;" \
+	"params.bin raw 0x1701 0x20;" \
+	"/Image.itb ext4 $rootdev $bootpart\0"
+
+#define CONFIG_EXTRA_ENV_SETTINGS					\
+	"fdt_high=0xffffffffffffffff\0"					\
+	"kerneladdr=0x40080000\0"					\
+	"kernel_file=Image\0"						\
+	"ramdiskaddr=0x49000000\0"					\
+	"ramdisk_file=uInitrd\0"					\
+	"fdtaddr=0x4a000000\0"						\
+	"fdtfile=\0"							\
+	"load_fdt=																	"\
+	"	if test -z \"$fdtfile\"; then 											"\
+	"		loop=$board_rev; 													"\
+	"		number=$board_rev: 													"\
+	"		success=0; 															"\
+	"		until test $loop -eq 0 || test $success -ne 0; do 					"\
+	"			if test $loop -lt 10; then 										"\
+	"				number=0$loop;												"\
+	"			else 															"\
+	"				number=$loop;												"\
+	"			fi;																"\
+	"			ext4size mmc $rootdev:$bootpart 								"\
+	"				s5p6818-artik710-iot-academy-rev${number}.dtb				"\
+	"			&& 																"\
+	"			setexpr success 1;												"\
+	"			setexpr loop $loop - 1;											"\
+	"		done; 																"\
+	"		if test $success -eq 0; then 										"\
+	"			ext4load mmc $rootdev:$bootpart $fdtaddr 						"\
+	"				s5p6818-artik710-raptor-rev03.dtb 							"\
+	"			||																"\
+	"			ext4load mmc $rootdev:$bootpart $fdtaddr 						"\
+	"				s5p6818-artik710-raptor.dtb;								"\
+	"		else 																"\
+	"			ext4load mmc $rootdev:$bootpart $fdtaddr 						"\
+	"				s5p6818-artik710-raptor-rev${number}.dtb;					"\
+	"		fi;																	"\
+	"	else 																	"\
+	"		ext4load mmc $rootdev:$bootpart $fdtaddr $fdtfile;					"\
+	"	fi; 																	"\
+	"	setenv success; setenv number; setenv loop;\0							"\
+	"bootdelay=" __stringify(CONFIG_BOOTDELAY) "\0"			\
+	"console=" CONFIG_DEFAULT_CONSOLE				\
+	"consoleon=setenv console=" CONFIG_DEFAULT_CONSOLE		\
+		"; saveenv; reset\0"					\
+	"consoleoff=setenv console=ram; saveenv; reset\0"		\
+	"rootdev=" __stringify(CONFIG_ROOT_DEV) "\0"			\
+	"rootpart=" __stringify(CONFIG_ROOT_PART) "\0"			\
+	"bootpart=" __stringify(CONFIG_BOOT_PART) "\0"			\
+	"rescue=0\0"							\
+	"root_rw=rw\0"							\
+	"opts=loglevel=4\0"						\
+	"rootfs_type=ext4\0"						\
+	"lcd1_0=s6e8fa0\0"						\
+	"lcd2_0=gst7d0038\0"						\
+	"lcd_panel=s6e8fa0\0"						\
+	"sdrecovery=run boot_cmd_sdboot;"				\
+		"sd_recovery mmc 1:3 48000000 partmap_emmc.txt\0"	\
+	"factory_load=factory_info load mmc 0 "				\
+		__stringify(CONFIG_FACTORY_INFO_START) " "		\
+		__stringify(CONFIG_FACTORY_INFO_SIZE) "\0"		\
+	"factory_save=factory_info save mmc 0 "				\
+		__stringify(CONFIG_FACTORY_INFO_START) " "		\
+		__stringify(CONFIG_FACTORY_INFO_SIZE) "\0"		\
+	"factory_set_ethaddr=run factory_load; gen_eth_addr ;"		\
+		"factory_info write ethaddr $ethaddr;"			\
+		"run factory_save\0"					\
+	"load_args=run factory_load; setenv bootargs ${console} "	\
+		"root=/dev/mmcblk${rootdev}p${rootpart} ${root_rw} "	\
+		"rootfstype=${rootfs_type} ${opts} ${recoverymode} "	\
+		"drm_panel=$lcd_panel "					\
+		"${ota} bootfrom=${bootpart} rescue=${rescue};\0"	\
+	"load_kernel="							\
+		"ret=0; "						\
+		"ext4load mmc ${rootdev}:${bootpart} $kerneladdr $kernel_file && setexpr ret 1; " \
+		"if test $ret -eq 0; then "				\
+			"if test $bootpart -eq 2; then "		\
+				"setenv bootpart 3; "			\
+			"else setenv bootpart 2; "			\
+			"fi; "						\
+			"setenv rescue 1; "				\
+			"ext4load mmc ${rootdev}:${bootpart} $kerneladdr $kernel_file; " \
+			"run load_args; "				\
+		"fi;\0"							\
+	"load_initrd=ext4load mmc ${rootdev}:${bootpart} $ramdiskaddr $ramdisk_file\0" \
+	"boot_cmd_initrd="						\
+		"run load_kernel; run load_fdt; run load_initrd;"	\
+		"booti $kerneladdr $ramdiskaddr $fdtaddr\0"		\
+	"boot_cmd_mmcboot="						\
+		"run load_kernel; run load_fdt;"			\
+		"booti $kerneladdr - $fdtaddr\0"			\
+	"boot_cmd_sdboot="						\
+		"setenv bootpart " __stringify(CONFIG_BOOT_PART_SD)"; "	\
+		"setenv rootpart " __stringify(CONFIG_ROOT_PART_SD)";\0"	\
+	"ramfsboot=run load_args; run boot_cmd_initrd\0"		\
+	"mmcboot=run load_args; run boot_cmd_mmcboot\0"			\
+	"recovery_cmd=run sdrecovery; setenv recoverymode recovery\0"	\
+	"recoveryboot=run recovery_cmd; run ramfsboot\0"		\
+	"hwtestboot=setenv rootdev 1;"					\
+		"setenv opts rootfstype=ext4 rootwait loglevel=4;"	\
+		"setenv fdtfile s5p6818-artik710-explorer.dtb; "	\
+		"run mmcboot\0"						\
+	"hwtest_recoveryboot=run recovery_cmd; run hwtestboot\0"	\
+	"bootcmd=run ramfsboot\0"
+
+#endif /* __CONFIG_H__ */
